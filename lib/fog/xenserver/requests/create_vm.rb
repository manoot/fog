module Fog
  module Xenserver
    class Real
      
      def create_vm( name_label )
        image_ref = @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VM.get_by_name_label'}, default_image.name_label)
        @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VM.clone'}, image_ref, name_label)
        vm_ref  = @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VM.get_by_name_label'}, name_label)
        vif_ref = @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VIF.create'}, default_vif_config( vm_ref ))
        @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VM.provision'}, vm_ref)
        @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'VM.get_by_name_label'}, name_label)
      end
      
      def default_vif_config( vm_ref )
        {
          'MAC_autogenerated' => 'True',
          'VM' => vm_ref,
          'network' => @connection.request({:parser => Fog::Parsers::Xenserver::Base.new, :method => 'network.get_by_name_label'}, default_network.name_label),
          'device' => '0',
          'MAC' => '',
          'MTU' => '0',
          'other_config' => {},
          'qos_algorithm_type' => 'ratelimit',
          'qos_algorithm_params' => {}
        }
      end

    end

    class Mock

      def create_vm()
        Fog::Mock.not_implemented
      end

    end
  end
end
